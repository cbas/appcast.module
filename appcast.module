<?php
/**
 * This file is part of the Appcast module for Drupal
 * Copyright (c) 2009 Sebastiaan Deckers
 * License: GNU General Public License version 3 or later
 *
 * @file appcast.module
 *
 * Module for Drupal to poll an appcast XML feed, mirror the latest software update enclosure and display its details in download buttons.
 */

/**
 * Register form callback for the admin configuration menu.
 */
function appcast_menu() {
  return array(
    'admin/settings/appcast' => array(
      'title' => 'Appcast',
      'description' => t('Configure these settings to determine how the appcast feed is parsed and displayed.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('appcast_settings'),
      'access arguments' => array('change appcast settings'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'appcast.admin.inc',
    )
  );
}

/**
 * Add permissions to the user management interface to restrict the settings page. (Drupal 6)
 */
function appcast_perm() {
  return array('change appcast settings');
}

/**
 * Add permissions to the user management interface to restrict the settings page. (Drupal 7)
 */
function appcast_permission() {
  return array(
    'change appcast settings' => array(
      'title' => t('Change appcast settings'),
      'description' => t('Edit the feed, display and file mirroring options. Only allow trusted users.')
    )
  );
}

/**
 * Display help and module information.
 * @param path Path to the page the help message is being displayed at.
 * @param arg Array that holds the current path as would be returned from arg() function.
 * @return help User friendly message.
 */
function appcast_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#appcast":
      $output = '<p>'. t('Polls an appcast, mirrors the latest enclosure and displays download buttons.') .'</p>';
      break;
  }
  return $output;
}

/**
 * Register hooks that we expose as templates to themes.
 */
function appcast_theme($existing, $type, $theme, $path) {
  return array(
    'appcast_button' => array(
      'template' => 'appcast-button',
      'arguments' => array('style' => NULL)
    )
  );
}

/**
 * Module-wide preprocessor for all templates. Exposes all properties to all templates to avoid redundant theme() arguments. DRY.
 * @param arg Reference to the array holding all properties for the template.
 */
function appcast_preprocess(&$arg) {
  $fields = array(
    'css', 'feed', 'href', 'mirror',
    'name', 'path', 'size', 'timestamp',
    'track', 'url', 'version');

  $config = _appcast_loadConfig($fields);

  foreach ($fields as $field) {
    $arg[$field] = $config[$field];
  }

  $arg['feed'] = url($arg['feed']);
  $arg['filename'] = basename($arg['url']);
  $arg['href'] = url($arg['href']);
  $arg['sizeKB'] = round($arg['size']/1024, 1);
  $arg['sizeMB'] = round($arg['size']/(1024*1024), 1);
  $arg['sizeGB'] = round($arg['size']/(1024*1024*1024), 1);
}

/**
 * Input checks for the appcast_button template.
 * @param arg Reference to the array holding all properties for the template.
 */
function appcast_preprocess_appcast_button(&$arg) {
}

/**
 * Display the download button.
 * @param string $op one of "list", "view", "save" and "configure"
 * @param integer $delta code to identify the block
 * @param array $edit only for "save" operation
 */
function appcast_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks[0] = array("info" => t('Appcast button'));
      $blocks[1] = array("info" => t('Appcast button beta'));
      $blocks[2] = array("info" => t('Appcast button narrow'));
      $blocks[3] = array("info" => t('Appcast button narrow beta'));
      return $blocks;
    case 'configure':
    case 'save':
      // TODO currently no per-block settings
      break;
    case 'view':
      $css = array('', 'beta', 'narrow', 'narrow beta');
      return array(
        'subject' => t('Download'),
        'content' => theme('appcast_button', $css[$delta])
      );
  }
}

/**
 * Poll the appcast for software updates
 */
function appcast_cron() {
  _appcast_updateAppcast();
}

/**
 * Store latest appcast properties and mirror the enclosure.
 * @param appcast Optional appcast object. Otherwise fetch the appcast from the feed URL.
 * @param forceUpdate Whether to get the latest enclosure even if it's the same as the version last fetched.
 * @param overridePath Location to store the enclosure instead of the normal configuration setting.
 */
function _appcast_updateAppcast($appcast = NULL, $forceUpdate = FALSE, $overridePath = NULL) {
  $success = FALSE;

  $config = _appcast_loadConfig(array('name', 'track', 'feed', 'path', 'mirror'));
  $previous = _appcast_loadConfig(array('size', 'timestamp', 'url', 'version'));
  $appcast = $appcast ? $appcast : _appcast_latestEntryFromFeed($config['feed'], $config['name'], $config['track']);

  if ($appcast) {
    if ($config['mirror']) {
      if (NULL !== $overridePath) {
        $config['path'] = $overridePath;
      }
	  if (!$config['path']) {
        $config['path'] = file_directory_path() . '/appcast/';
      }
	  if (strcmp('/', substr($config['path'], -1)) == 0) {
        $config['path'] .= basename($appcast['url']);
      }
	}

    $moreRecent = strcmp($previous['timestamp'], $appcast['timestamp']) < 0;
    $higherVersion = strcmp($previous['version'], $appcast['version']) < 0;
    if ($forceUpdate || $moreRecent || $higherVersion) {
      if (!$config['mirror'] || _appcast_downloadUpdate($appcast['url'], $config['path'])) {
        variable_set('appcast_size', $appcast['size']);
        variable_set('appcast_timestamp', $appcast['timestamp']);
        variable_set('appcast_url', $appcast['url']);
        variable_set('appcast_version', $appcast['version']);
        $success = TRUE;
      }
    } else {
      $success = TRUE;
    }
  } else {
    watchdog('appcast', t('Cannot load appcast: The feed is not available or does not contain an update entry. Check the URL, name and track of the appcast.'), NULL, WATCHDOG_WARNING);
  }
  return $success;
}

/**
 * Load configuration data.
 * @param properties The names of all module variables to load.
 */
function _appcast_loadConfig($properties) {
  $config = array();

  foreach ($properties as $property) {
    $config[$property] = variable_get('appcast_' . $property, NULL);
  }

  return $config;
}

/**
 * Download the feed and get the latest appcast entry.
 * @param feedUrl URL of the appcast feed.
 * @param appName Name of the application to find in the feed.
 * @param appTrack Track of the update to look for.
 */
function _appcast_latestEntryFromFeed($feedUrl, $appName, $appTrack) {
  $appcast = array();
  $dom = new DOMDocument();

  // Try to load the feed from the url but supress PHP warnings generated through DOMDocument.
  $result = @$dom->load(url($feedUrl, array('absolute' => TRUE)));

  if ($result) {
    $xpath = new DOMXPath($dom);
    $ns = array(
      'appcast' => 'http://pandion.im/protocol/appcast/1.0',
      'atom' => 'http://www.w3.org/2005/Atom'
    );

    $xpath->registerNamespace('appcast', $ns['appcast']);
    $xpath->registerNamespace('atom', $ns['atom']);
    $nodes = $xpath->query(
      '/atom:feed' .
      '/atom:entry' .
      '[atom:updated]' .
      '[@appcast:name="' . $appName . '"]' . // TODO escape chars
      '[@appcast:track="' . $appTrack . '"]' . // TODO escape chars
      '[@appcast:version]' .
      '[atom:link[@href and @length and @rel="enclosure"]]'
    );

    foreach ($nodes as $node) {
      $timestamp = $node->getElementsByTagName('updated')->item(0)->nodeValue;
      if (strcmp($timestamp, $appcast['timestamp']) > 0) {
        $appcast['size'] = $xpath->query('atom:link[@href and @rel="enclosure"]/@length', $node)->item(0)->value;
        $appcast['timestamp'] = $timestamp;
        $appcast['url'] = $xpath->query('atom:link[@length and @rel="enclosure"]/@href', $node)->item(0)->value;
        $appcast['version'] = $node->getAttributeNS($ns['appcast'], 'version');
      }
    }
  } else {
    watchdog('appcast', t('Could not fetch Appcast feedURL. The feedUrl may be invalid or not reachable.'), NULL, WATCHDOG_ERROR);
    return FALSE; 
  }
  return $appcast;
}

/**
 * Download a URL to disk.
 * @param url URL of the file to download.
 * @param path Location on disk to store the downloaded file. Relative to the Drupal root.
 */
function _appcast_downloadUpdate ($url, $path) {
  $success = FALSE;

  $result = drupal_http_request($url, array('User-Agent' => 'Drupal Appcast Module'));

  switch ($result->code) {
    case 200:
    case 302:
    case 307:
      file_check_directory(dirname($path), FILE_CREATE_DIRECTORY);
      $fullpath = realpath('.') . ((strcmp('/', $path[0]) == 0) ? '' : '/') . $path;
      $success = _appcast_writeToFile(&$result->data, $fullpath); // TODO is this how a reference is passed?
      if ($success) {
        watchdog('appcast', t('Successfully mirrored @url to @path', array('@url' => $url, '@path' => $fullpath)), NULL, WATCHDOG_INFO);
      } else {
        watchdog('appcast', t('Cannot save appcast enclosure to local file. Check file access to path: @path', array('@path' => $fullpath)), NULL, WATCHDOG_ERROR);
      }
      break;
    default:
      watchdog('appcast', t('Enclosure download failed. HTTP status code @code from URL: @url', array('@code' => $result->code, '@url' => $url)), NULL, WATCHDOG_ERROR);
  }
  return $success;
}

/**
 * Write data to a file.
 * @param path Location on disk to store the downloaded file. Absolute file path.
 * @param data Reference to the file content in binary format.
 */
function _appcast_writeToFile (&$data, $path) {
  $success = FALSE;
  // Safe: Ensures the file is in a safe location like the files directory but we need to be able to store files anywhere on disk.
  //$retval = file_save_data($result->data, $path, FILE_EXISTS_REPLACE); 
  // Unsafe: writes to any location
  $file = fopen($path, file_exists($path) ? 'r+b' : 'wb'); // Open binary file and set pointer to start of file.
  if ($file !== FALSE) {
    if (flock($file, LOCK_EX)) { // Get exclusive write lock to the file.
      if (ftruncate($file, 0)) { // Make the file empty.
        $success = fwrite($file, $data); // Store the data in the file.
		flock($file, LOCK_UN); // Release file lock.
		fclose($file); // Release file handle.
      }
    }
  }
  return $success;
}
